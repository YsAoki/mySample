環境構築含む作業や、仕様書などの閲覧込みで2〜3日or １週間かかる可能性がある。
そもそもsky案件でgitを使わずに共有ファイルからそのまま直書きでやる可能性もある。。2〜3年前にgitからの情報流出があったことがあったので、その背景から。

基本的に作業側として、githubのmainブランチ自体に入れない可能性もある。管理的な観点から。
リモートの、main間でのブランチのやり取りは、管理者ポジションの人が行うので基本的に自分で触る機会がほとんどない。

基本的な流れ的なところ。
まず現場内で渡されたアカウント（新しいgoogleとgithubアカウント）
渡されたurlからgit clone。する。

mainブランチは使わずに、developを使う。

git cloneしたプロジェクト内で、まずdevelopブランチをローカルブランチに作成する。
cloneしたローカルブランチは、最初表示されるのはmainブランチのみ。

git pull URL
git checkout -b develop（ローカルに作るブランチ名） origin/develop(リモートリポジトリのdevelopブランチをもとに作るコマンド)

上記コマンドを実行することでリモートのdevelopブランチをベースにしたローカル上でのdevelopブランチができる。

ここでローカルのdevelopブランチから、gitcheckout -b feature/作業名 origin/developして作業ブランチを作成する。

作業が完了した後に、他の人との同時作業が行われている場合は、git pull origin developを実行して最新の状態にした後、git add commit push を実行。 git hubでのアカウント内でプルリクを行う。（PRとも略す）
※プルリクはマージリクエストと同意語

コメント内に、どういった理由での根拠なのかをしっかりと書き込む。（日付や変更点、また理由づけなどを書く）
研修内容と違って、厳しい判定のもと管理者よりマージが行われる（コードレビュー）
マージリクエスト時に、ターゲットブランチをgithub上で選択する際に、必ずリモートのdevelopブランチを選択する。mainには行わない。
マージリクエストをした後は、画面通りに行く場合は一旦リモートにpushしたbranchを削除する作業がある。（絶対に削除しないといけないことはないのだが、ブランチの名称の被りや数が増えすぎるのを防止するため）削除した後も、ローカルにはpushした時点でのブランチが残っているため、削除するにあたって何か起きた場合、再度pushすることで修正できるので特に問題はない。

作業が完了した時点で次の作業に移る場合、既存の作業ブランチからで大丈夫なので、
git checkout -b feature/新しいローカルのブランチ名 origin/developとする。
これで新しいfeatureブランチを作成することができる上、他の人の同時に作業しているdevelopブランチをもとにした新しいブランチを作成することができる。(一旦ローカルのdevelopブランチに戻ってから、pullして新しいfeatureブランチを作成という作業自体が短縮できる)

※feature/ブランチ名 ブランチ名は、タスクのチケット番号や作業内容、また作業者名などが入る。現場によってルールが違うので都度確認必要。